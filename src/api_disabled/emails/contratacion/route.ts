import { NextResponse } from 'next/server'
import emailTemplates from '@/lib/email-templates'

export async function POST(request: Request) {
  try {
    const data = await request.json()
    const {
      // Datos de la entidad
      nombreEntidad,
      cif,
      tipoEntidad,
      numeroMenores,
      direccion,
      telefono,
      web,

      // Datos del contratante
      nombreContratante,
      dniContratante,
      cargoContratante,
      telefonoContratante,
      emailContratante,
      contrase√±aContratante,

      // Datos del delegado principal
      nombreDelegadoPrincipal,
      dniDelegadoPrincipal,
      fechaNacimientoDelegadoPrincipal,
      telefonoDelegadoPrincipal,
      emailDelegadoPrincipal,
      contrase√±aDelegadoPrincipal,
      funcionDelegadoPrincipal,
      experienciaPrevia,
      formacionPrevia,

      // Datos del delegado suplente (opcional)
      tieneSuplente,
      nombreDelegadoSuplente,
      dniDelegadoSuplente,
      fechaNacimientoDelegadoSuplente,
      telefonoDelegadoSuplente,
      emailDelegadoSuplente,
      contrase√±aDelegadoSuplente,
      funcionDelegadoSuplente,

      // Datos del administrativo
      nombreAdministrativo,
      dniAdministrativo,
      cargoAdministrativo,
      telefonoAdministrativo,
      emailAdministrativo,

      // Datos del plan y pago
      plan,
      importeTotal,
      kitComunicacion,
      numeroFactura
    } = data

    console.log('üìß Iniciando secuencia de emails de contrataci√≥n CORREGIDA para:', nombreEntidad)

    // Array para almacenar los resultados de los emails enviados
    const emailsEnviados = []

    try {
      // 1. EMAIL INMEDIATO ‚Üí Admin Custodia360: Notificaci√≥n nueva contrataci√≥n
      console.log('üìß Enviando email 1: Notificaci√≥n admin nueva contrataci√≥n')
      const emailAdmin = await fetch('/api/emails/admin-notificacion', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          nombreEntidad,
          nombreContratante,
          plan,
          importeTotal,
          emailContratante,
          emailAdministrativo
        })
      })
      emailsEnviados.push({ tipo: 'admin_notificacion', enviado: emailAdmin.ok })

      // 2. EMAIL INMEDIATO ‚Üí Contratante: Confirmaci√≥n de contrataci√≥n con credenciales
      console.log('üìß Enviando email 2: Confirmaci√≥n contrataci√≥n al contratante')
      const emailConfirmacion = await emailTemplates.enviarConfirmacionContratacion(
        emailContratante,
        nombreContratante,
        nombreEntidad,
        plan,
        { email: emailContratante, password: contrase√±aContratante }
      )
      emailsEnviados.push({ tipo: 'confirmacion_contratacion', enviado: !!emailConfirmacion.data })

      // 3. EMAIL INMEDIATO ‚Üí Administrativo: Factura primer pago
      console.log('üìß Enviando email 3: Factura primer pago al administrativo')
      const emailFactura = await emailTemplates.enviarFacturaPrimerPago(
        emailAdministrativo,
        nombreEntidad,
        nombreAdministrativo,
        numeroFactura || `FAC-${Date.now()}`,
        importeTotal / 2, // 50% primer pago
        plan
      )
      emailsEnviados.push({ tipo: 'factura_primer_pago', enviado: !!emailFactura.data })

      // 4. EMAIL +1h ‚Üí Delegado Principal: Credenciales y asignaci√≥n
      console.log('üìß Programando email 4: Credenciales delegado principal (+1h)')
      setTimeout(async () => {
        try {
          await emailTemplates.enviarCredencialesDelegado(
            emailDelegadoPrincipal,
            nombreDelegadoPrincipal,
            'principal',
            nombreEntidad,
            { email: emailDelegadoPrincipal, password: contrase√±aDelegadoPrincipal }
          )
          console.log('‚úÖ Email credenciales delegado principal enviado')
        } catch (error) {
          console.error('‚ùå Error enviando credenciales delegado principal:', error)
        }
      }, 1 * 60 * 60 * 1000) // 1 hora

      // 5. EMAIL +1h ‚Üí Delegado Suplente (si existe): Credenciales y asignaci√≥n
      if (tieneSuplente && emailDelegadoSuplente) {
        console.log('üìß Programando email 5: Credenciales delegado suplente (+1h)')
        setTimeout(async () => {
          try {
            await emailTemplates.enviarCredencialesDelegado(
              emailDelegadoSuplente,
              nombreDelegadoSuplente,
              'suplente',
              nombreEntidad,
              { email: emailDelegadoSuplente, password: contrase√±aDelegadoSuplente }
            )
            console.log('‚úÖ Email credenciales delegado suplente enviado')
          } catch (error) {
            console.error('‚ùå Error enviando credenciales delegado suplente:', error)
          }
        }, 1.1 * 60 * 60 * 1000) // 1 hora 6 minutos

        emailsEnviados.push({ tipo: 'credenciales_suplente', programado: true })
      }

      // 6. EMAIL +48h CONDICIONAL ‚Üí Delegado Principal: Recordatorio si NO ha iniciado formaci√≥n
      console.log('üìß Programando email 6: Recordatorio formaci√≥n delegado principal (+48h CONDICIONAL)')
      setTimeout(async () => {
        try {
          // TODO: En producci√≥n, verificar si realmente NO ha iniciado la formaci√≥n
          // Por ahora enviamos recordatorio simulado
          await emailTemplates.enviarRecordatorioFormacion(
            emailDelegadoPrincipal,
            nombreDelegadoPrincipal,
            nombreEntidad,
            0 // 0% progreso simulado
          )
          console.log('‚úÖ Email recordatorio formaci√≥n delegado principal enviado (CONDICIONAL)')
        } catch (error) {
          console.error('‚ùå Error enviando recordatorio formaci√≥n delegado principal:', error)
        }
      }, 48 * 60 * 60 * 1000) // 48 horas

      // 7. EMAIL +48h CONDICIONAL ‚Üí Delegado Suplente: Recordatorio si NO ha iniciado formaci√≥n
      if (tieneSuplente && emailDelegadoSuplente) {
        console.log('üìß Programando email 7: Recordatorio formaci√≥n delegado suplente (+48h CONDICIONAL)')
        setTimeout(async () => {
          try {
            // TODO: En producci√≥n, verificar si realmente NO ha iniciado la formaci√≥n
            await emailTemplates.enviarRecordatorioFormacion(
              emailDelegadoSuplente,
              nombreDelegadoSuplente,
              nombreEntidad,
              0 // 0% progreso simulado
            )
            console.log('‚úÖ Email recordatorio formaci√≥n delegado suplente enviado (CONDICIONAL)')
          } catch (error) {
            console.error('‚ùå Error enviando recordatorio formaci√≥n delegado suplente:', error)
          }
        }, 48.1 * 60 * 60 * 1000) // 48 horas 6 minutos

        emailsEnviados.push({ tipo: 'recordatorio_suplente', programado: true })
      }

      // 8. EMAIL +1 semana ‚Üí Contratante: Check-up semanal (simulado)
      console.log('üìß Programando email 8: Check-up semanal (+1 semana)')
      setTimeout(async () => {
        try {
          await emailTemplates.enviarInformeTrimestral(
            emailContratante,
            nombreContratante,
            nombreEntidad,
            '1¬™ Semana',
            95, // Estado de cumplimiento inicial
            0, // Incidentes gestionados
            ['Implementaci√≥n inicial completada', 'Delegados en formaci√≥n', 'Sistema en activaci√≥n']
          )
          console.log('‚úÖ Email check-up semanal enviado')
        } catch (error) {
          console.error('‚ùå Error enviando check-up semanal:', error)
        }
      }, 7 * 24 * 60 * 60 * 1000) // 1 semana

      // 9. EMAIL +6 meses ‚Üí Administrativo: Factura segundo pago
      console.log('üìß Programando email 9: Factura segundo pago (+6 meses)')
      setTimeout(async () => {
        try {
          await emailTemplates.enviarFacturaSegundoPago(
            emailAdministrativo,
            nombreEntidad,
            nombreAdministrativo,
            `FAC2-${Date.now()}`,
            importeTotal / 2, // 50% segundo pago
            plan
          )
          console.log('‚úÖ Email factura segundo pago enviado')
        } catch (error) {
          console.error('‚ùå Error enviando factura segundo pago:', error)
        }
      }, 6 * 30 * 24 * 60 * 60 * 1000) // 6 meses (aproximado)

      emailsEnviados.push({ tipo: 'credenciales_principal', programado: true })
      emailsEnviados.push({ tipo: 'recordatorio_principal', programado: true })
      emailsEnviados.push({ tipo: 'check_up_semanal', programado: true })
      emailsEnviados.push({ tipo: 'factura_segundo_pago', programado: true })

      console.log('‚úÖ Secuencia de emails de contrataci√≥n CORREGIDA iniciada correctamente')
      console.log('üìä Emails enviados inmediatamente:', emailsEnviados.filter(e => e.enviado).length)
      console.log('üìä Emails programados:', emailsEnviados.filter(e => e.programado).length)

      // Nota sobre implementaci√≥n para producci√≥n
      console.log('üìù NOTA: Los emails de certificaci√≥n se enviar√°n autom√°ticamente cuando el delegado complete REALMENTE la formaci√≥n')

      return NextResponse.json({
        success: true,
        message: 'Secuencia de emails de contrataci√≥n CORREGIDA iniciada correctamente',
        emailsEnviados,
        totalEmails: emailsEnviados.length,
        nota: 'Los emails de certificaci√≥n y sistema operativo se activar√°n cuando el delegado complete realmente la formaci√≥n',
        implementacionFutura: {
          certificacion: 'Trigger autom√°tico al aprobar test real',
          sistemaOperativo: 'Trigger autom√°tico cuando delegado principal est√© certificado',
          recordatorios: 'Solo se env√≠an si NO ha iniciado formaci√≥n en 48h'
        }
      })

    } catch (error) {
      console.error('‚ùå Error en la secuencia de emails:', error)
      return NextResponse.json({
        success: false,
        error: 'Error interno en el env√≠o de emails',
        details: error instanceof Error ? error.message : 'Error desconocido'
      }, { status: 500 })
    }

  } catch (error) {
    console.error('‚ùå Error procesando solicitud de emails:', error)
    return NextResponse.json({
      success: false,
      error: 'Error procesando la solicitud',
      details: error instanceof Error ? error.message : 'Error desconocido'
    }, { status: 400 })
  }
}

/*
üìù NOTAS PARA IMPLEMENTACI√ìN EN PRODUCCI√ìN:

1. EMAILS DE CERTIFICACI√ìN (TRIGGER REAL):
   - Deben enviarse desde el dashboard de formaci√≥n cuando el delegado apruebe el test
   - No desde aqu√≠ con setTimeout autom√°tico

2. EMAIL SISTEMA OPERATIVO (TRIGGER REAL):
   - Debe enviarse cuando el delegado principal est√© REALMENTE certificado
   - No autom√°ticamente a las 48h

3. RECORDATORIOS CONDICIONALES:
   - Verificar en base de datos si el delegado ha iniciado la formaci√≥n
   - Solo enviar recordatorio si progreso = 0% despu√©s de 48h

4. TRACKING DE ESTADOS:
   - Implementar tabla de estados de formaci√≥n por delegado
   - Triggers en dashboard de formaci√≥n para emails autom√°ticos

FLUJO CORRECTO:
Contrataci√≥n ‚Üí Credenciales (+1h) ‚Üí Recordatorio si NO inicia (+48h) ‚Üí
Certificaci√≥n (al aprobar test) ‚Üí Sistema operativo (al certificar principal) ‚Üí
Check-up (+1 semana desde operativo)
*/
